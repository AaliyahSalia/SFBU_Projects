
//DoubleSubScriptedArray.h
#ifndef DOUBLESUBSCRIPTEDARRAY_H
#define DOUBLESUBSCRIPTEDARRAY_H
#include <iostream>
using namespace std;
class DoubleSubScriptedArray
{
friend ostream &operator<<(ostream &, const DoubleSubScriptedArray &);
friend istream &operator>>(istream &, DoubleSubScriptedArray &);
public:
explicit DoubleSubScriptedArray(int = 2, int = 2); 
DoubleSubScriptedArray(const DoubleSubScriptedArray &); ~DoubleSubScriptedArray();
int getSize() const; 
const DoubleSubScriptedArray &operator=(const DoubleSubScriptedArray &); 
bool operator==(const DoubleSubScriptedArray &) const; 
bool operator!=(const DoubleSubScriptedArray &right) const
{
return !(*this == right); 
} 

int &operator[](int);

int operator[](int) const;

int &operator()(int, int);
int operator()(int, int) const;
private:
int size; 
int *ptr; 
int rows;
int cols;
}; 
#endif

//DoubleSubScriptedArray.cpp
#include <iostream>
#include <iomanip>
#include <cstdlib> // exit function prototype
//#include "DoubleSubScriptedArray.h"
using namespace std;
DoubleSubScriptedArray::DoubleSubScriptedArray(int rowSize, int colSize)
{

if (rowSize > 0 && colSize > 0)
{
rows = rowSize;
cols = colSize;
size = rowSize * colSize;
}
else
{
throw invalid_argument("The Array size must be greater than 0");
}
ptr = new int[size]; 
for (int i = 0; i < size; ++i)
ptr[i] = 0; 
} 
DoubleSubScriptedArray::DoubleSubScriptedArray(const DoubleSubScriptedArray &arrayToCopy)
: size(arrayToCopy.size)
{
ptr = new int[size]; 
for (int i = 0; i < size; ++i)
ptr[i] = arrayToCopy.ptr[i]; 
} 

DoubleSubScriptedArray::~DoubleSubScriptedArray()
{
delete[] ptr; 
} 
int DoubleSubScriptedArray::getSize() const
{
return size; 
} 

const DoubleSubScriptedArray &DoubleSubScriptedArray::operator=(const DoubleSubScriptedArray &right)
{
if (&right != this) 
{
if (size != right.size)
{
delete[] ptr; 
size = right.size; 
ptr = new int[size]; 
} 
for (int i = 0; i < size; ++i)
ptr[i] = right.ptr[i]; 
rows = right.rows;
cols = right.cols;
} 
return *this; 
} 

bool DoubleSubScriptedArray::operator==(const DoubleSubScriptedArray &right) const
{
if (size != right.size)
return false; 
for (int i = 0; i < size; ++i)
if (ptr[i] != right.ptr[i])
return false; 
return true; 
} 

int &DoubleSubScriptedArray::operator[](int subscript)
{

if (subscript < 0 || subscript >= size)
throw out_of_range("The Subscript out of range");
return ptr[subscript]; 
} 
int DoubleSubScriptedArray::operator[](int subscript) const
{

if (subscript < 0 || subscript >= size)
throw out_of_range("The Subscript out of range");
return ptr[subscript]; 
} 
int &DoubleSubScriptedArray::operator()(int row, int column)
{
if (row < 0 || row > rows - 1)
throw out_of_range("Sorry, the Row out of range");
else if (column < 0 || column > cols - 1)
throw out_of_range("Sorry, the Column out of range");
else
return ptr[row * cols + column]; 
}
int DoubleSubScriptedArray::operator()(int row, int column) const
{
if (row < 0 || row > rows - 1)
throw out_of_range("Sorry, the row out of range");
else if (column < 0 || column > cols - 1)
throw out_of_range("Sorry, the column out of range");
else
return ptr[row * cols + column]; // returns copy
}

istream &operator>>(istream &input, DoubleSubScriptedArray &a)
{
for (int i = 0; i < a.size; ++i)
input >> a.ptr[i];
return input; } 
ostream &operator<<(ostream &output, const DoubleSubScriptedArray &a)
{
int i;

for (i = 0; i < a.size; ++i)
{
output << setw(12) << a.ptr[i];
if ((i + 1) % a.cols == 0) 
output << endl;
} 

return output; 
} 

#include <iostream>
#include <string>
//#include "DoubleSubScriptedArray.h"
using namespace std;
int main()
{
DoubleSubScriptedArray chessBoard(2, 2);
chessBoard[0] = 10;
chessBoard[1] = 20;
chessBoard(1, 0) = 30;
chessBoard(1, 1) = 40;
cout << "The Value at (0, 1): " << chessBoard(0, 1) << endl;
cout << "The Value at (1, 0): " << chessBoard(1, 0) << endl;
cout << "chessBoard: " << endl << chessBoard << endl;
DoubleSubScriptedArray chessBoardTwo(2, 2);
chessBoardTwo[0] = 10;
chessBoardTwo[1] = 20;
chessBoardTwo[2] = 30;
chessBoardTwo[3] = 40;
cout << "chessBoardTwo: " << endl << chessBoardTwo << endl;
cout << "chessBoard == chessBoardTwo : " << (chessBoard == chessBoardTwo) << endl;
chessBoardTwo[3] = 50;
cout << "chessBoardTwo: " << endl << chessBoardTwo << endl;
cout << "chessBoard == chessBoardTwo : " << (chessBoard == chessBoardTwo) << endl;
cout << "chessBoard != chessBoardTwo : " << (chessBoard != chessBoardTwo) << endl;
chessBoardTwo[3] = 40;
cout << "chessBoardTwo: " << endl << chessBoardTwo << endl;
cout << "chessBoard != chessBoardTwo : " << (chessBoard != chessBoardTwo) << endl;
DoubleSubScriptedArray chessBoardThree(2, 5);
chessBoardThree(1, 0) = 100;
cout << "chessBoardThree: " << endl << chessBoardThree << endl;
chessBoardThree = chessBoardTwo;
cout << "chessBoardThree: " << endl << chessBoardThree << endl;

int newRows, newCols;
cout << "Please enter the number of rows: " << endl;
cin >> newRows;
cout << "Please enter the number of columns: " << endl;
cin >> newCols;
DoubleSubScriptedArray chessBoardFour(newRows, newCols);
cout << "Please enter " << newRows*newCols << " numbers:" << endl;
cin >> chessBoardFour;
cout << "chessBoardFour:" << endl << chessBoardFour << endl;
} 
